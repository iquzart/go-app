#
# Azure DevOps pipeline
#
# Application     : Go App
# Created by      : Muhammed Iqbal
#
#


trigger:
  batch: true
  branches:
    include:
    - master
    - development
  paths:
    #include:
    exclude:
    - azure-pipeline.yml
    - README.md

# Don't run against PRs
pr: none

variables:
#- group: <Variable Group Name>

- name: tag
  value:  $(Build.SourceBranchName)-$(GitShortSha)

# Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'

- name: containerRegistryServiceConnection
  value: 'Docker Hub'

- name: imageRepository
  value: 'diquzart/go-app'

stages:
- stage: Test
  displayName: Test and Coverage
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      displayName: Get GoLang
      inputs:
        version: '1.14.1'

#    - task: Go@0
#      displayName: GO Test
#     inputs:
#        command: 'test'
#        arguments: '-v ./controllers'
#        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - script: |
        echo "print go version"
        go version
        go get github.com/jstemmer/go-junit-report
        go get github.com/axw/gocov/gocov
        go get github.com/AlekSi/gocov-xml
        go get -u gopkg.in/matm/v1/gocov-html
        go test -v -coverprofile=coverage.txt ./controllers 2>&1 | go-junit-report > report.xml
        gocov convert coverage.txt > coverage.json
        gocov-xml < coverage.json > coverage.xml
        mkdir coverage
        gocov-html < coverage.json > coverage/index.html
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Run unit test'

    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura 
        summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
        reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage

- stage: Build
  displayName: Build Image

  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImageName: $(vmImageName)

    steps:
    - checkout: self
      clean: true
      displayName: Cleaning local repo

    - script: GitShortSha=`git rev-parse --short HEAD` && echo "##vso[task.setvariable variable=GitShortSha]$GitShortSha"
      displayName: Set the Git Short SHA as an environment variablie

    - task: Docker@2
      displayName: Build Container Image
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Containerfile'
        tags: '$(tag)'
        
    - task: Docker@2
      displayName: Push Image to Container Registry
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

